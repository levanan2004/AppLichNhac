import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/foundation.dart';
import '../models/call_log.dart';
import '../utils/platform_call_handler.dart';

class CallService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // Th·ª±c hi·ªán cu·ªôc g·ªçi v·ªõi x·ª≠ l√Ω platform-specific
  Future<CallResult> makeCall(String phoneNumber) async {
    try {
      final result = await PlatformCallHandler.makeCall(phoneNumber);
      return result;
    } catch (e) {
      debugPrint('L·ªói khi g·ªçi ƒëi·ªán tho·∫°i: $e');
      return CallResult.failure(e.toString());
    }
  }

  // L∆∞u l·ªãch s·ª≠ cu·ªôc g·ªçi v·ªõi metadata platform-specific
  Future<String?> saveCallLog(CallLog callLog) async {
    try {
      debugPrint('üîÑ B·∫Øt ƒë·∫ßu l∆∞u call log cho customer: ${callLog.customerId}');
      
      // Ki·ªÉm tra Firebase ƒë√£ kh·ªüi t·∫°o ch∆∞a
      if (!Firebase.apps.isNotEmpty) {
        debugPrint('‚ùå Firebase ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
        return null;
      }
      
      // Th√™m metadata v·ªÅ platform
      final callLogData = callLog.toMap();
      callLogData['platform'] = defaultTargetPlatform.toString();
      callLogData['timestamp'] = FieldValue.serverTimestamp();
      
      debugPrint('üìã Call log data: $callLogData');
      
      // Tr√™n iOS, kh√¥ng th·ªÉ bi·∫øt tr·∫°ng th√°i th·ª±c t·∫ø c·ªßa cu·ªôc g·ªçi
      // n√™n ƒë·∫∑t status l√† 'initiated' thay v√¨ 'completed'
      if (defaultTargetPlatform == TargetPlatform.iOS && 
          callLogData['status'] == 'completed') {
        callLogData['status'] = 'initiated';
        callLogData['notes'] = (callLogData['notes'] ?? '') + 
            ' [iOS: Tr·∫°ng th√°i th·ª±c t·∫ø kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c]';
      }
      
      debugPrint('üî• Attempting to write to Firestore...');
      final docRef = await _firestore
          .collection('call_logs')
          .add(callLogData);
      
      debugPrint('‚úÖ L∆∞u call log th√†nh c√¥ng v·ªõi ID: ${docRef.id}');
      return docRef.id;
    } on FirebaseException catch (e) {
      debugPrint('üî• Firebase error khi l∆∞u call log: ${e.code} - ${e.message}');
      return null;
    } catch (e) {
      debugPrint('‚ùå L·ªói khi l∆∞u l·ªãch s·ª≠ cu·ªôc g·ªçi: $e');
      return null;
    }
  }

  // L·∫•y l·ªãch s·ª≠ cu·ªôc g·ªçi c·ªßa kh√°ch h√†ng
  Future<List<CallLog>> getCallLogsForCustomer(String customerId) async {
    try {
      final querySnapshot = await _firestore
          .collection('call_logs')
          .where('customerId', isEqualTo: customerId)
          .orderBy('callTime', descending: true)
          .get();

      return querySnapshot.docs
          .map((doc) => CallLog.fromMap(doc.data(), doc.id))
          .toList();
    } catch (e) {
      print('L·ªói khi l·∫•y l·ªãch s·ª≠ cu·ªôc g·ªçi: $e');
      return [];
    }
  }

  // C·∫≠p nh·∫≠t l·ªãch s·ª≠ cu·ªôc g·ªçi
  Future<bool> updateCallLog(String callLogId, Map<String, dynamic> updates) async {
    try {
      await _firestore
          .collection('call_logs')
          .doc(callLogId)
          .update(updates);
      return true;
    } catch (e) {
      print('L·ªói khi c·∫≠p nh·∫≠t l·ªãch s·ª≠ cu·ªôc g·ªçi: $e');
      return false;
    }
  }

  // X√≥a l·ªãch s·ª≠ cu·ªôc g·ªçi
  Future<bool> deleteCallLog(String callLogId) async {
    try {
      await _firestore
          .collection('call_logs')
          .doc(callLogId)
          .delete();
      return true;
    } catch (e) {
      print('L·ªói khi x√≥a l·ªãch s·ª≠ cu·ªôc g·ªçi: $e');
      return false;
    }
  }

  // Stream l·ªãch s·ª≠ cu·ªôc g·ªçi real-time
  Stream<List<CallLog>> getCallLogsStream(String customerId) {
    return _firestore
        .collection('call_logs')
        .where('customerId', isEqualTo: customerId)
        .orderBy('callTime', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => CallLog.fromMap(doc.data(), doc.id))
            .toList());
  }

  // Ki·ªÉm tra kh·∫£ nƒÉng g·ªçi ƒëi·ªán tr√™n platform hi·ªán t·∫°i
  Future<bool> canMakePhoneCalls() async {
    return await PlatformCallHandler.hasCallPermission();
  }

  // L·∫•y t·ªïng s·ªë cu·ªôc g·ªçi theo tr·∫°ng th√°i
  Future<Map<String, int>> getCallStatistics(String customerId) async {
    try {
      final querySnapshot = await _firestore
          .collection('call_logs')
          .where('customerId', isEqualTo: customerId)
          .get();

      final Map<String, int> stats = {
        'total': 0,
        'completed': 0,
        'missed': 0,
        'busy': 0,
      };

      for (final doc in querySnapshot.docs) {
        final data = doc.data();
        stats['total'] = (stats['total'] ?? 0) + 1;
        final status = data['status'] ?? 'completed';
        stats[status] = (stats[status] ?? 0) + 1;
      }

      return stats;
    } catch (e) {
      print('L·ªói khi l·∫•y th·ªëng k√™ cu·ªôc g·ªçi: $e');
      return {'total': 0, 'completed': 0, 'missed': 0, 'busy': 0};
    }
  }
}
